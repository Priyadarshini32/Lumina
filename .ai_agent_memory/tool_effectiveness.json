{
  "read_file": {
    "total_uses": 122,
    "successful_uses": 122,
    "failed_uses": 0,
    "avg_execution_time": 0.016008719071434373,
    "common_errors": {},
    "usage_contexts": [
      {
        "timestamp": "2025-08-29T12:52:25.026748",
        "context": {
          "arguments": {
            "filepath": "sample.py"
          }
        }
      },
      {
        "timestamp": "2025-09-08T22:35:50.611934",
        "context": {
          "arguments": {
            "filepath": "test.py"
          }
        }
      },
      {
        "timestamp": "2025-09-18T14:56:28.265460",
        "context": {
          "arguments": {
            "filepath": "test.py"
          }
        }
      },
      {
        "timestamp": "2025-09-19T10:23:20.078838",
        "context": {
          "arguments": {
            "filepath": "sample.txt"
          }
        }
      }
    ],
    "last_used": "2025-09-19T10:23:20.085085"
  },
  "write_file": {
    "total_uses": 74,
    "successful_uses": 72,
    "failed_uses": 2,
    "avg_execution_time": 0.006236556567526158,
    "common_errors": {
      "[Errno 22] Invalid argument": 2
    },
    "usage_contexts": [
      {
        "timestamp": "2025-08-29T12:50:08.358576",
        "context": {
          "arguments": {
            "filepath": "sample.py",
            "content": "def is_even_or_odd(number):\n    if number % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage\nnumber = 10\nresult = is_even_or_odd(number)\nprint(f\"{number} is {result}\")\n\nnumber = 7\nresult = is_even_or_odd(number)\nprint(f\"{number} is {result}\")"
          }
        }
      },
      {
        "timestamp": "2025-08-29T12:51:42.769728",
        "context": {
          "arguments": {
            "filepath": "sample.py",
            "content": "def is_palindrome(text):\n    processed_text = ''.join(c for c in text.lower() if c.isalnum())\n    return processed_text == processed_text[::-1]\n\n# Example usage:\nstring1 = \"A man, a plan, a canal: Panama\"\nstring2 = \"race a car\"\nstring3 = \"hello\"\n\nprint(f\"Is '{string1}' a palindrome? {is_palindrome(string1)}\")\nprint(f\"Is '{string2}' a palindrome? {is_palindrome(string2)}\")\nprint(f\"Is '{string3}' a palindrome? {is_palindrome(string3)}\")"
          }
        }
      },
      {
        "timestamp": "2025-08-30T10:49:25.742914",
        "context": {
          "arguments": {
            "filepath": "test.py",
            "content": "def is_palindrome(text):\n    processed_text = ''.join(c for c in text.lower() if c.isalnum())\n    return processed_text == processed_text[::-1]\n\n# Example usage\nstring1 = \"A man, a plan, a canal: Panama\"\nstring2 = \"race a car\"\nstring3 = \"hello\"\n\nprint(f\"'{string1}' is a palindrome: {is_palindrome(string1)}\")\nprint(f\"'{string2}' is a palindrome: {is_palindrome(string2)}\")\nprint(f\"'{string3}' is a palindrome: {is_palindrome(string3)}\")"
          }
        }
      },
      {
        "timestamp": "2025-09-06T19:29:49.623159",
        "context": {
          "arguments": {
            "filepath": "odd_even_checker.py",
            "content": "def is_odd_or_even(number):\n  \"\"\"Checks if a number is odd or even.\n\n  Args:\n    number: An integer.\n\n  Returns:\n    'Even' if the number is even, 'Odd' if the number is odd.\n  \"\"\"\n  if number % 2 == 0:\n    return 'Even'\n  else:\n    return 'Odd'\n\n# Example usage:\nnumber = 10\nresult = is_odd_or_even(number)\nprint(f\"{number} is {result}\")\n\nnumber = 7\nresult = is_odd_or_even(number)\nprint(f\"{number} is {result}\")"
          }
        }
      },
      {
        "timestamp": "2025-09-08T22:17:00.527580",
        "context": {
          "arguments": {
            "filepath": "check_even_odd.py",
            "content": "def check_even_odd(number):\n    if number % 2 == 0:\n        print('The number is even')\n    else:\n        print('The number is odd')\n\n# Now you can test the function with any number\ncheck_even_odd(9)"
          }
        }
      },
      {
        "timestamp": "2025-09-08T22:35:38.757173",
        "context": {
          "arguments": {
            "filepath": "test.py",
            "content": "def find_majority(arr):\n  freq = {}\n  for item in arr:\n    if item in freq:\n      freq[item] += 1\n    else:\n      freq[item] = 1\n\n  majority_count = len(arr)//2\n  for key, value in freq.items():\n    if value > majority_count:\n      return key\n  return None\n"
          }
        }
      },
      {
        "timestamp": "2025-09-19T10:24:33.125506",
        "context": {
          "arguments": {
            "filepath": "even_odd_checker.py",
            "content": "def is_even_or_odd(number):\n  \"\"\"Checks if a number is even or odd.\"\"\"\n  if number % 2 == 0:\n    return \"Even\"\n  else:\n    return \"Odd\"\n\n# Example usage\nnumber = 10\nresult = is_even_or_odd(number)\nprint(f\"{number} is {result}\")\n\nnumber = 7\nresult = is_even_or_odd(number)\nprint(f\"{number} is {result}\")"
          }
        }
      }
    ],
    "last_used": "2025-09-19T10:24:33.133754"
  },
  "run_command": {
    "total_uses": 6,
    "successful_uses": 5,
    "failed_uses": 1,
    "avg_execution_time": 7.446651816368103,
    "common_errors": {
      "Command not found": 1
    },
    "usage_contexts": [],
    "last_used": "2025-08-18T12:33:23.159296"
  },
  "get_memory_status": {
    "total_uses": 7,
    "successful_uses": 7,
    "failed_uses": 0,
    "avg_execution_time": 0.001260201136271159,
    "common_errors": {},
    "usage_contexts": [],
    "last_used": "2025-08-17T17:57:43.470727"
  },
  "list_directory_contents": {
    "total_uses": 49,
    "successful_uses": 49,
    "failed_uses": 0,
    "avg_execution_time": 0.0009523589035560345,
    "common_errors": {},
    "usage_contexts": [
      {
        "timestamp": "2025-09-06T19:27:55.273570",
        "context": {
          "arguments": {}
        }
      },
      {
        "timestamp": "2025-09-19T09:46:19.643452",
        "context": {
          "arguments": {}
        }
      }
    ],
    "last_used": "2025-09-19T09:46:19.646859"
  },
  "search_memory_patterns": {
    "total_uses": 1,
    "successful_uses": 1,
    "failed_uses": 0,
    "avg_execution_time": 0,
    "common_errors": {},
    "usage_contexts": [],
    "last_used": "2025-08-17T13:42:43.464776"
  },
  "unknown": {
    "total_uses": 62,
    "successful_uses": 62,
    "failed_uses": 0,
    "avg_execution_time": 0,
    "common_errors": {},
    "usage_contexts": [],
    "last_used": "2025-08-17T17:43:31.414444"
  },
  "search_files": {
    "total_uses": 26,
    "successful_uses": 26,
    "failed_uses": 0,
    "avg_execution_time": 7.2499267137967625,
    "common_errors": {},
    "usage_contexts": [],
    "last_used": "2025-08-18T15:26:49.574541"
  },
  "clear_file_content": {
    "total_uses": 16,
    "successful_uses": 16,
    "failed_uses": 0,
    "avg_execution_time": 0.004026591777801514,
    "common_errors": {},
    "usage_contexts": [
      {
        "timestamp": "2025-08-29T12:50:26.096359",
        "context": {
          "arguments": {
            "filepath": "sample.py"
          }
        }
      },
      {
        "timestamp": "2025-08-30T10:49:40.353513",
        "context": {
          "arguments": {
            "filepath": "test.py"
          }
        }
      },
      {
        "timestamp": "2025-09-08T22:31:45.663895",
        "context": {
          "arguments": {
            "filepath": "check_even_odd"
          }
        }
      },
      {
        "timestamp": "2025-09-08T22:32:28.063401",
        "context": {
          "arguments": {
            "filepath": "check_even_odd"
          }
        }
      },
      {
        "timestamp": "2025-09-19T10:25:18.081847",
        "context": {
          "arguments": {
            "filepath": "even_odd_checker.py"
          }
        }
      }
    ],
    "last_used": "2025-09-19T10:25:18.090313"
  },
  "delete_file": {
    "total_uses": 10,
    "successful_uses": 10,
    "failed_uses": 0,
    "avg_execution_time": 0.003079652786254883,
    "common_errors": {},
    "usage_contexts": [
      {
        "timestamp": "2025-09-08T22:32:53.322490",
        "context": {
          "arguments": {
            "filepath": "check_even_odd"
          }
        }
      }
    ],
    "last_used": "2025-09-08T22:32:53.338086"
  },
  "undo_last_action": {
    "total_uses": 10,
    "successful_uses": 10,
    "failed_uses": 0,
    "avg_execution_time": 0.0017168521881103516,
    "common_errors": {},
    "usage_contexts": [
      {
        "timestamp": "2025-09-08T22:33:06.907631",
        "context": {
          "arguments": {}
        }
      },
      {
        "timestamp": "2025-09-19T10:25:27.633845",
        "context": {
          "arguments": {}
        }
      }
    ],
    "last_used": "2025-09-19T10:25:27.642114"
  },
  "run_git_command": {
    "total_uses": 10,
    "successful_uses": 10,
    "failed_uses": 0,
    "avg_execution_time": 0.1377251148223877,
    "common_errors": {},
    "usage_contexts": [
      {
        "timestamp": "2025-08-29T12:52:57.728702",
        "context": {
          "arguments": {
            "command": "status"
          }
        }
      },
      {
        "timestamp": "2025-08-30T10:48:43.100552",
        "context": {
          "arguments": {
            "command": "status"
          }
        }
      },
      {
        "timestamp": "2025-09-19T10:24:03.800648",
        "context": {
          "arguments": {
            "command": "status"
          }
        }
      }
    ],
    "last_used": "2025-09-19T10:24:03.805548"
  },
  "run_linter": {
    "total_uses": 18,
    "successful_uses": 18,
    "failed_uses": 0,
    "avg_execution_time": 1.0075727038913302,
    "common_errors": {},
    "usage_contexts": [],
    "last_used": "2025-08-18T12:54:38.067067"
  },
  "apply_code_change": {
    "total_uses": 6,
    "successful_uses": 6,
    "failed_uses": 0,
    "avg_execution_time": 0.002524256706237793,
    "common_errors": {},
    "usage_contexts": [],
    "last_used": "2025-08-18T13:02:09.178345"
  },
  "run_tests": {
    "total_uses": 2,
    "successful_uses": 2,
    "failed_uses": 0,
    "avg_execution_time": 0.9955692291259766,
    "common_errors": {},
    "usage_contexts": [],
    "last_used": "2025-08-17T17:49:47.749901"
  }
}